# -*- org-confirm-babel-evaluate: nil; -*-
#+AUTHOR: Dan ƒåerm√°k
#+DATE: February 3 2024
#+EMAIL: dcermak@suse.com
#+TITLE: =pytest_container=
#+SUBTITLE: Testing Container Images with Python and Pytest

#+REVEAL_ROOT: ./node_modules/reveal.js/
#+REVEAL_THEME: simple
#+REVEAL_PLUGINS: (highlight notes history)
#+OPTIONS: toc:nil
#+REVEAL_DEFAULT_FRAG_STYLE: appear
#+REVEAL_INIT_OPTIONS: transition: 'none', hash: true
#+OPTIONS: num:nil toc:nil center:nil reveal_title_slide:nil
#+REVEAL_EXTRA_CSS: ./node_modules/@fortawesome/fontawesome-free/css/all.min.css
#+REVEAL_EXTRA_CSS: ./custom-style.css
#+REVEAL_HIGHLIGHT_CSS: ./node_modules/reveal.js/plugin/highlight/zenburn.css

#+REVEAL_TITLE_SLIDE: <h2 class="title">%t</h2>
#+REVEAL_TITLE_SLIDE: <p class="subtitle" style="color: Gray;">%s</p>
#+REVEAL_TITLE_SLIDE: <p class="author">%a</p>
#+REVEAL_TITLE_SLIDE: <div style="float:left"><a href="https://fosdem.org/2024/" target="_blank"><img src="./media/FOSDEM_logo.svg" height="50px" style="margin-bottom:-12px"/> FOSDEM 2024</a></div>
#+REVEAL_TITLE_SLIDE: <div style="float:right;font-size:35px;"><p xmlns:dct="http://purl.org/dc/terms/" xmlns:cc="http://creativecommons.org/ns#"><a href="https://creativecommons.org/licenses/by/4.0" target="_blank" rel="license noopener noreferrer" style="display:inline-block;">
#+REVEAL_TITLE_SLIDE: CC BY 4.0 <i class="fab fa-creative-commons"></i> <i class="fab fa-creative-commons-by"></i></a></p></div>

* who -u

Dan ƒåerm√°k

@@html: <div style="float:center">@@
@@html: <table class="who-table">@@
@@html: <tr><td><i class="fab fa-suse"></i></td><td> Software Developer @SUSE</td></tr>@@
@@html: <tr><td><i class="fab fa-fedora"></i></td><td> i3 SIG, Package maintainer</td></tr>@@
@@html: <tr><td><i class="far fa-heart"></i></td><td> Developer Tools, Testing and Documentation, Home Automation</td></tr>@@
@@html: <tr></tr>@@
@@html: <tr></tr>@@
@@html: <tr><td><i class="fa-solid fa-globe"></i></td><td> <a href="https://dancermak.name/">https://dancermak.name</a></td></tr>@@
@@html: <tr><td><i class="fab fa-github"></i></td><td> <a href="https://github.com/dcermak/">dcermak</a> </td></tr>@@
@@html: <tr><td><i class="fab fa-mastodon"></i></td><td> <a href="https://mastodon.social/@Defolos">@Defolos@mastodon.social</a></td></tr>@@
@@html: </table>@@
@@html: </div>@@


* Why Python and Pytest?

When shell scripts are:
#+ATTR_REVEAL: :frag (appear)
- portable / run everywhere
- fast üèéÔ∏è
- everyone understands them


* Sales pitch

#+ATTR_REVEAL: :frag (appear)
- @@html: <i class="fa-solid fa-cloud-sun-rain"></i>@@ shell scripts are brittle
- automatically pull, build, launch & cleanup containers @@html: <i class="fa-solid fa-cloud-arrow-down"></i>@@
- use [[https://testinfra.readthedocs.io/][testinfra]] for convenience
- @@html:<i class="fa-solid fa-shuffle"></i>@@ parallel test execution via [[https://github.com/pytest-dev/pytest-xdist][pytest-xdist]]
- find & bind free ports
- @@html: <i class="fa-solid fa-boxes-stacked"></i>@@ create & destroy pods
- @@html: <i class="fa-solid fa-broom"></i>@@ create and cleanup container volumes & bind mounts
- @@html: <i class="fa-solid fa-box-archive"></i>@@ run the same test on multiple container images
- supports @@html:<i class="fa-brands fa-docker"></i>@@ docker and podman transparently
- works with Python 3.6+ and on =x86_64=, =aarch64=, =s390x=, =ppcle64=


* Basic Example
#+ATTR_REVEAL: :code_attribs data-line-numbers='1-2|4-6|9-13'
#+begin_src python
import pytest
from pytest_container import Container, ContainerData

TW = Container(
    url="registry.opensuse.org/opensuse/tumbleweed:latest"
)


@pytest.mark.parametrize("container", [TW], indirect=True)
def test_etc_os_release_present(container: ContainerData):
    assert container.connection.file(
        "/etc/os-release"
    ).exists
#+end_src


* Use Cases

#+ATTR_REVEAL: :frag (appear)
- @@html: <i class="fa-solid fa-box-open"></i>@@ system tests of base containers
- @@html: <i class="fa-solid fa-database"></i>@@ test applications inside containers
- @@html: <i class="fa-solid fa-boxes-stacked"></i>@@ run tests of your application on multiple OS'


* ~pytest~ basics

#+ATTR_REVEAL: :frag (appear appear appear) :frag_idx (1 2 3)
- @@html: <i class="fa-brands fa-python"></i>@@ Python testing framework
- executes all functions called ~test_*~
- fixtures for setup & teardown @@html: <i class="fa-solid fa-broom"></i>@@


#+ATTR_REVEAL: :frag (appear) :frag_idx 3
#+begin_src python
def test_ehlo(smtp_connection):
    response, msg = smtp_connection.ehlo()
    assert response == 250
#+end_src

#+ATTR_REVEAL: :frag (appear) :frag_idx (4)
- test [[https://docs.pytest.org/en/stable/how-to/parametrize.html][parametrization]]

#+ATTR_REVEAL: :frag (appear) :frag_idx 4
#+begin_src python
@pytest.mark.parametrize("x", [0, 1])
@pytest.mark.parametrize("y", [2, 3])
def test_foo(x: int, y: int):
    # do something with x & y here
#+end_src

* Usage examples

** Build a new container for tests

#+ATTR_REVEAL: :code_attribs data-line-numbers='2|3-6|1-7|9-15'
#+begin_src python
WEB_SERVER = DerivedContainer(
    base="registry.opensuse.org/opensuse/leap:15.4",
    containerfile="""RUN zypper -n in python3 \
    && echo "Hello Green World!" > index.html
ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
"""
)

@pytest.mark.parametrize(
    "container", [WEB_SERVER], indirect=True
)
def test_python_installed(container: ContainerData):
    assert container.connection.package(
        "python3"
    ).is_installed
#+end_src

** Get a free port on the host

#+ATTR_REVEAL: :code_attribs data-line-numbers='3|1-4|6-9|12|6-14'
#+begin_src python
WEB_SERVER = DerivedContainer(
    # snip
    forwarded_ports=[PortForwarding(container_port=8000)],
)

@pytest.mark.parametrize(
    "container", [WEB_SERVER], indirect=True
)
def test_port_forward(container: ContainerData, host):
    cmd = (
        "curl --fail localhost:"
        + str(container.forwarded_ports[0].host_port)
    )
    host.run_expect([0], cmd)
#+end_src


** Create a Pod

#+ATTR_REVEAL: :code_attribs data-line-numbers='1-4|2|3|6-9|10-14'
#+begin_src python
MEDIAWIKI_FPM_POD = Pod(
    containers=[MEDIAWIKI_FPM_CONTAINER, NGINX_FPM_PROXY],
    forwarded_ports=[PortForwarding(container_port=80)],
)

@pytest.mark.parametrize(
    "pod", [MEDIAWIKI_FPM_POD], indirect=True
)
def test_port_forward(pod: PodData, host):
    cmd = (
        "curl --fail localhost:"
        + str(pod.forwarded_ports[0].host_port)
    )
    host.run_expect([0], cmd)
#+end_src


** Run mutable tests

#+ATTR_REVEAL: :frag (appear) :frag_idx 1
use the ~container_per_test~ fixture:

#+ATTR_REVEAL: :frag (appear) :frag_idx 2 :code_attribs data-line-numbers='4,11|1-5|8-14'
#+begin_src python
@pytest.mark.parametrize(
    "container_per_test", [TW], indirect=True
)
def test_rm_rf(container_per_test):
    container_per_test.connection.run_expect([0], "rm -rf /")


@pytest.mark.parametrize(
    "container_per_test", [TW], indirect=True
)
def test_uninstall_zypper(container_per_test):
    container_per_test.connection.run_expect(
        [0], "rpm -e --nodeps zypper"
    )
#+end_src


** Use the same container globally

#+ATTR_REVEAL: :frag (appear) :frag_idx 1
use the ~auto_container~ / ~auto_container_per_test~ fixtures:

#+ATTR_REVEAL: :frag (appear) :frag_idx 2 :code_attribs data-line-numbers='1|4,7'
#+begin_src python
CONTAINER_IMAGES = [TW, LEAP, SLE]


def test_etc_os_release(auto_container): ...


def test_zypper_rm_works(auto_container_per_test): ...
#+end_src


** Dependencies between containers

#+ATTR_REVEAL: :code_attribs data-line-numbers='1-3|4-7|8-11|13,15'
#+begin_src python
TW = Container(
    url="registry.opensuse.org/opensuse/tumbleweed:latest"
)
NGINX = DerivedContainer(
    base=TW,
    containerfile="RUN zypper -n in nginx",
)
NGINX_DEBUG = DerivedContainer(
    base=NGINX,
    containerfile="RUN zypper -n in gdb nginx-debuginfo"
)

CONTAINER_IMAGES=[NGINX_DEBUG]

def test_nginx(auto_container): ...
#+end_src


** üîé Inspect containers

#+ATTR_REVEAL: :code_attribs data-line-numbers='1-4|5|7|7,8|7,8,10-13'
#+begin_src python
@pytest.mark.parametrize(
    "container", [MY_IMAGE], indirect=True
)
def test_inspect(container: ContainerData):
    inspect = container.inspect

    assert inspect.config.user == "me"
    assert inspect.config.cmd == ["/bin/sh"]

    assert (
        "HOME" in inspect.config.env
        and inspect.config.env["HOME"] == "/src/"
    )
#+end_src


** Container Volumes

Bind mounts
#+ATTR_REVEAL: :frag (appear) :frag_idx 2 :code_attribs data-line-numbers='4|3-5|1-6|9-12|13|9-14'
#+begin_src python
ROOTDIR_BIND_MOUNTED = DerivedContainer(
    base="registry.opensuse.org/opensuse/tumbleweed",
    volume_mounts=[
        BindMount("/src/", host_path=get_rootdir())
    ],
)


@pytest.mark.parametrize(
    "container", [ROOTDIR_BIND_MOUNTED], indirect=True
)
def test_bind_mount_cwd(container: ContainerData):
    vol = container.container.volume_mounts[0]
    assert container.connection.file("/src/").exists
#+end_src

#+REVEAL: split

Container volumes
#+ATTR_REVEAL: :frag (appear) :frag_idx 2 :code_attribs data-line-numbers='3|1-4'
#+begin_src python
WITH_VAR_LOG_VOLUME = DerivedContainer(
    base="registry.opensuse.org/opensuse/tumbleweed",
    volume_mounts=[ContainerVolume("/var/log/")],
)
#+end_src


** =HEALTHCHECK=

#+begin_notes
- will wait for healthcheck
#+end_notes

#+ATTR_REVEAL: :code_attribs data-line-numbers='5|3-5|1-6|9-10|12-14|9-15'
#+begin_src python
WEB_SERVER = DerivedContainer(
    # snip
    containerfile="""
ENTRYPOINT ["/usr/bin/python3", "-m", "http.server"]
HEALTHCHECK CMD curl --fail http://0.0.0.0:8000""",
)


@pytest.mark.parametrize("container", [WEB_SERVER], indirect=True)
def test_server_up(container, container_runtime):
    assert (
        container_runtime.get_container_health(
            container.container_id
        ) == ContainerHealth.HEALTHY
    )
#+end_src

#+REVEAL: split

#+ATTR_REVEAL: :frag (appear) :frag_idx 1
Don't wait for the health check

#+ATTR_REVEAL: :frag (appear) :frag_idx 2 :code_attribs data-line-numbers='3|1-4|10-12'
#+begin_src python
WEB_SERVER_2 = DerivedContainer(
    # snip
    healthcheck_timeout=timedelta(seconds=-1),
)


@pytest.mark.parametrize("container", [WEB_SERVER_2], indirect=True)
def test_server_up(container, container_runtime):
    assert (
        container_runtime.get_container_health(
            container.container_id
        ) == ContainerHealth.STARTING
    )
#+end_src


** Pick the Container Engine

#+begin_src bash
export CONTAINER_RUNTIME=docker
pytest -vv
#+end_src


** Run tests in parallel

#+ATTR_REVEAL: :code_attribs data-line-numbers='1|3|5'
#+begin_src bash
pip install pytest-xdist
# or
poetry add --dev pytest-xdist

pytest -vv -- -n auto
#+end_src


** üßπ Automatic cleanup
#+ATTR_REVEAL: :frag (appear)
- containers
- volumes
- pods
- temporary directories
- ‚ö†Ô∏èImages and intermediate layers are retained ‚ö†Ô∏è


* Users

#+ATTR_REVEAL: :frag (appear)
- [[https://github.com/SUSE/BCI-tests/][BCI testsuite]]
- [[https://github.com/OSInside/kiwi/tree/master/test/scripts][kiwi image builder scripts]]
- [[https://github.com/openSUSE/obs-service-replace_using_package_version/tree/master/integration_tests][=obs-service-replace_using_package_version= integration tests]]
- [[https://github.com/openSUSE/obs-scm-bridge/tree/main/test][=obs-scm-bridge= integration tests]]
- [[https://github.com/openSUSE/obs-service-node_modules/blob/master/test_node_modules_download.py][=obs-service-node_modules= smoke test]]
- Your project here?


* Thanks!

- [[https://github.com/evrardjp][Jean-Philippe Evrard]]
- QE-C Team, especially Jos√© Lausuch and Felix Niederwanger


* Give it a try!

@@html: <i class="fab fa-github"></i>@@ [[https://github.com/dcermak/pytest_container][=dcermak/pytest_container=]]

@@html:<i class="fa-solid fa-book"></i>@@ [[https://dcermak.github.io/pytest_container/index.html][=dcermak.github.io/pytest_container=]]

@@html:<i class="fa-solid fa-person-chalkboard"></i>@@ [[https://dcermak.github.io/pytest_container-presentation/pytest_container.html][=dcermak.github.io/pytest_container-presentation=]]


* What would you like to see?

#+ATTR_REVEAL: :frag appear :frag_idx 1
üëâ [[https://github.com/dcermak/pytest_container/issues][=github.com/dcermak/pytest_container/issues=]]


* Questions?

#+ATTR_REVEAL: :frag (appear)
Answers!
